#!/bin/sh
# $Id: lab,v 1.4 2005/10/17 21:07:43 doros Exp $

SCRIPTNAME=`echo $0 | awk -vFS='/' '{print $NF}'`

waitfinish()
{
    SEMAPHORE=$1.booting
    touch $SEMAPHORE
    while [ -f $SEMAPHORE ]; do
        sleep 2
    done
    sleep 2
}

notifyfinish()
{
    rm $1.booting
}



startvm()
{
    X="-q --exec=/hosthome${PWD#$HOME}/${SCRIPTNAME}"
    export NETKIT_VM_TYPE=sarge

    ########################################### topology
    #
    #

    f=~/.Xdefaults-`hostname`
    if [ -f $f ] ; then
      mv $f $f.save
    fi

    # Making backing store
    echo "Making backing store ... "
    if [ "none$BACK_ST" != "none" ]; then
      mkdir $BACK_ST/tmp
    else
      echo "This script consumes many space."
      echo "It's recomemded the use of \$BACK_ST backing store ENV variable"
    fi
    # for alfa
    rm -f $BACK_ST/tmp/backing-store-01
    dd if=/dev/zero of=$BACK_ST/tmp/backing-store-01 bs=1M count=1 seek=12 2>/dev/null
    rm -f $BACK_ST/tmp/backing-store-02
    dd if=/dev/zero of=$BACK_ST/tmp/backing-store-02 bs=1M count=1 seek=20 2>/dev/null
    rm -f $BACK_ST/tmp/backing-store-04
    dd if=/dev/zero of=$BACK_ST/tmp/backing-store-04 bs=1M count=1 seek=20 2>/dev/null
    # for client
    rm -f $BACK_ST/tmp/backing-store-03
    dd if=/dev/zero of=$BACK_ST/tmp/backing-store-03 bs=1M count=1 seek=12 2>/dev/null
    echo "Done."

    echo "*xterm*geometry: 80x24+1+35">$f
    vstart kdc --eth0=A  --mem=128 $X
    waitfinish kdc

    echo "*xterm*geometry: 80x24-1+35">$f
    vstart alfa --eth0=A --mem=128 \
      --append="ubd1=$BACK_ST/tmp/backing-store-01" \
      --append="ubd2=$BACK_ST/tmp/backing-store-02" \
      --append="ubd3=$BACK_ST/tmp/backing-store-04" $X
    waitfinish alfa

    echo "*xterm*geometry: 80x40+269+128">$f
    vstart client --append="eth0=tuntap,tap0" --eth1=A --mem=64 \
      --append="ubd1=$BACK_ST/tmp/backing-store-03" $X
    waitfinish client

    if [ -f $f.save ] ; then
      mv $f.save $f
    else
      rm -f $f
    fi

    #
    #
    ########################################### end topology
    echo ""
    echo " *** all machines started ***"
}

crashvm()
{
    ########################################### crash
    #
    #
    vcrash kdc
    vcrash alfa
    vcrash client
    #
    #
    ########################################### end crash
}


help_exit()
{
        echo "usage: $0 {start|crash}"
        echo "  Run this script from your home or from a subdir"
        echo "  lab start"
        echo "     starts all virtual machines for the lab "
        echo "     press enter after each virtual machines has booted"
        echo "  lab crash"
        echo "     makes all virtual machines to crash and delete .disk files"
        exit 1
}


if [ "$1" = "start" ]; then
     if [ `grep tap0 /proc/net/dev|wc -l` = 0 ] ; then
       echo "missing tap0 device"
       exit 1
     fi
     startvm

elif [ "$1" = "crash" ]; then
     crashvm
     rm -f *.disk   *.booting
elif [ ! -z $1 ]; then
     help_exit

elif [ -z $1 ]; then

    if [ `id -u` != "0"  ]; then
        help_exit
    fi


    #
    # this is executed in the virtual machine by vlab_guest when initializing
	# and it is NEVER executed by in the host environment
	#
    SCRIPTFILE=`cat /proc/cmdline | awk -v FS== -v RS=' ' '{if($1=="exec") print $2}' `
    SCRIPTDIR=${SCRIPTFILE%/${SCRIPTNAME}}
    cd $SCRIPTDIR


    case "$HOSTNAME" in

    ################################################### machine configurations
    #
    #

    kdc)
        # configure IP address 
        ifconfig eth0 192.168.10.4 up
        route add default gw 192.168.10.200
        # configure and start bind
        cp $SCRIPTDIR/dns/db.root /etc/bind/db.root
        cp $SCRIPTDIR/dns/db.192.168.* /etc/bind
        cp $SCRIPTDIR/dns/db.istituto /etc/bind/db.istituto
        cp $SCRIPTDIR/dns/named.conf /etc/bind/named.conf
        /etc/init.d/bind9 start
        # setup resolv.conf
        cp $SCRIPTDIR/dns/resolv.conf /etc/resolv.conf
        > /etc/hosts
        # Kerberos
        mv  /etc/krb5.conf /etc/krb5.conf.org
        cp $SCRIPTDIR/krb5.conf /etc/krb5.conf
        cp $SCRIPTDIR/kdc.conf /etc/krb5kdc/kdc.conf
        cp $SCRIPTDIR/kadm5.acl /etc/krb5kdc/kadm5.acl
        # scripts
        cp $SCRIPTDIR/kdc.sh /root
        cp $SCRIPTDIR/principals.sh /root
        cp $SCRIPTDIR/principals-afs.sh /root
        cp $SCRIPTDIR/principals2.sh /root
        # setup kerberos principals
        sh kdc.sh
        sh principals.sh
        sh principals-afs.sh
        sh principals2.sh
        #
        cp $SCRIPTDIR/krb5-admin-server /etc/default/krb5-admin-server
        # ssh
        cp $SCRIPTDIR/authorized_keys2 /root/.ssh/authorized_keys2
        rm -f /etc/ssh/sshd_not_to_be_run
        chmod go= /root
        /etc/init.d/ssh start
        # ldap
        gzip -dc $SCRIPTDIR/samba.schema.gz > /etc/ldap/schema/samba.schema
        gzip -dc $SCRIPTDIR/krb5-kdc.schema.gz > /etc/ldap/schema/krb5-kdc.schema
        mv /etc/ldap/slapd.conf /etc/ldap/slapd.conf.org
        cp $SCRIPTDIR/slapd.* /etc/ldap
        cp $SCRIPTDIR/ldapentries.diff /root
        # module
        cp $SCRIPTDIR/pw-kerberos.so /usr/lib/pw-kerberos.so
        # libkrb53: /usr/lib/libkrb5.so.3.2
        slapadd -l ldapentries.diff 
        /etc/init.d/slapd start

        notifyfinish kdc
        ;;

    alfa)
        echo "export SCRIPTDIR=$SCRIPTDIR" >> /etc/profile
        # configure IP address 
        ifconfig eth0 192.168.10.100
        route add default gw 192.168.10.200
        # setup resolv.conf
        cp $SCRIPTDIR/dns/resolv.conf /etc/resolv.conf
        > /etc/hosts
        # Kerberos
        mv  /etc/krb5.conf /etc/krb5.conf.org
        cp $SCRIPTDIR/krb5.conf /etc/krb5.conf
        # afs
        chmod go=rx /etc/openafs/server
        cp $SCRIPTDIR/CellServDB /etc/openafs/server/CellServDB
        cp $SCRIPTDIR/ThisCell /etc/openafs/ThisCell
        cp $SCRIPTDIR/ThisCell /etc/openafs/server/ThisCell
        cp $SCRIPTDIR/cacheinfo /etc/openafs/cacheinfo
        cp $SCRIPTDIR/afs.conf.client /etc/openafs/afs.conf.client
        # make ext3 filesytem (quiet) into backing file
        /sbin/mkfs.ext3 -q /dev/ubd/1
        mount -rw /dev/ubd/1 /var/cache/openafs
        # make ext3 filesytem (quiet) into backing file
        /sbin/mkfs.ext3 -q /dev/ubd/2
        mkdir /vicepa
        mount -rw /dev/ubd/2 /vicepa
        # ssh
        rm -f /etc/ssh/sshd_not_to_be_run
        /etc/init.d/ssh start
        cp $SCRIPTDIR/afs.conf.client.4ever /etc/openafs/afs.conf.client
        # ssh
        cp $SCRIPTDIR/id_dsa* /root/.ssh
        chmod go= /root/.ssh/id_dsa
        cp $SCRIPTDIR/known_hosts /root/.ssh/known_hosts
        scp kdc:/etc/krb5.keytab.afs /root
        asetkey add 3 /root/krb5.keytab.afs afs/istituto.it
        rm /root/krb5.keytab.afs
        scp 192.168.10.4:/etc/krb5-alfa.keytab /etc/krb5.keytab
        # scripts
        cat $SCRIPTDIR/CellServDB >> /etc/openafs/CellServDB
        chmod 700 /etc/openafs/server-local
        cp $SCRIPTDIR/step-0?.sh /root
        rm -rf /var/log/openafs/*
        /root/step-01.sh
        /root/step-02.sh
        /root/step-03.sh

        notifyfinish alfa
        ;;


    client)
        # setup pconsole environment
        echo 'export P_CONNECT_CMD=ssh' >> /etc/profile
        echo 'export P_TERM_OPTIONS="-geometry 140x24 +sb"' >> /etc/profile
        echo 'export DISPLAY=192.168.77.1:0.0' >> /etc/profile
        # configure IP address 
        ifconfig eth0 192.168.77.2 up
        ifconfig eth1 192.168.10.200
        route add default gw 192.168.77.1
        # setup resolv.conf
        cp $SCRIPTDIR/dns/resolv.conf /etc/resolv.conf
        > /etc/hosts
        # ssh
        cp $SCRIPTDIR/id_dsa* /root/.ssh
        chmod go= /root/.ssh/id_dsa
        cp $SCRIPTDIR/known_hosts /root/.ssh/known_hosts
        scp 192.168.10.4:/etc/krb5-client.keytab /etc/krb5.keytab
        # NSS/LDAP
        cp $SCRIPTDIR/libnss-ldap.conf /etc
        cp $SCRIPTDIR/nsswitch.conf /etc
        # Kerberos
        mv  /etc/krb5.conf /etc/krb5.conf.org
        cp $SCRIPTDIR/krb5.conf /etc/krb5.conf
        # PAM
        cp $SCRIPTDIR/common-* /etc/pam.d/
        # afs
        cp $SCRIPTDIR/ThisCell /etc/openafs/ThisCell
        cp $SCRIPTDIR/cacheinfo /etc/openafs/cacheinfo
        # make ext3 filesytem (quiet) into backing file
        /sbin/mkfs.ext3 -q /dev/ubd/1
        mount -rw /dev/ubd/1 /var/cache/openafs
        # install openafs client
        cp $SCRIPTDIR/afs.conf.client /etc/openafs/afs.conf.client
        cat $SCRIPTDIR/CellServDB >> /etc/openafs/CellServDB
        #
        cp $SCRIPTDIR/afs.conf.client.4ever /etc/openafs/afs.conf.client
        /etc/init.d/openafs-client start

        notifyfinish client
        ;;

    #
    #
    ############################################## end machine configurations


    *)
        echo internal error: $HOSTNAME
        exit 1
    esac
fi
